version: "3.2"


networks:
  ffc:
    name: ffc-network

volumes:
  mssql:
  mongodb:
  elasticsearch:
  redis:
  expt-log:


services:
  
  mongodb:
    image: mongo
    container_name: mongodb
    restart: always
    ports:
      - "27017:27017"
    environment:
      - MONGO_INITDB_ROOT_USERNAME=admin
      - MONGO_INITDB_ROOT_PASSWORD=password
      - MONGO_INITDB_DATABASE=featureflagsco
    volumes:
      - mongodb:/data/db
      - ./docker-entrypoint-initdb.d/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - ffc
    profiles:
      - docker
      - development
  
#  mongo-express:
#    image: mongo-express
#    container_name: mongo-express
#    ports:
#      - "8081:8081"
#    environment:
#      - ME_CONFIG_MONGODB_ADMINUSERNAME=admin
#      - ME_CONFIG_MONGODB_ADMINPASSWORD=password
#      - ME_CONFIG_MONGODB_SERVER=mongodb
#    restart: unless-stopped
#    networks:
#      - ffc
#    profiles:
#      - docker
#      - development

  mssql:
    image: "mcr.microsoft.com/mssql/server:2017-latest"
    container_name: sqldb
    restart: always
    ports:
      - "1433:1433"
    volumes:
      - mssql:/var/opt/mssql
      # we copy our scripts onto the container
      - ./docker-entrypoint-initdb.d/sql:/usr/src/app
    working_dir: /usr/src/app 
    # run the entrypoint.sh that will import the data AND sqlserver
    command: sh -c ' chmod +x ./entrypoint.sh; ./entrypoint.sh & /opt/mssql/bin/sqlservr;'
    environment:
      - ACCEPT_EULA=Y
      - SA_PASSWORD=YourSTRONG@Passw0rd
      - MSSQL_PID=Express
    networks:
      - ffc
    profiles:
      - docker
      - development

  elasticsearch:
    image: "docker.elastic.co/elasticsearch/elasticsearch:7.14.0"
    container_name: elasticsearch
    restart: always
    environment:
      - xpack.security.enabled=false
      - discovery.type=single-node
    ulimits:
      memlock:
        soft: -1
        hard: -1
      nofile:
        soft: 65536
        hard: 65536
    cap_add:
      - IPC_LOCK
    volumes:
      - elasticsearch:/usr/share/elasticsearch/data
      - ./docker-entrypoint-initdb.d/es.jvm.options:/usr/share/elasticsearch/config/jvm.options.d/es.jvm.options
    ports:
      - "9200:9200"
      - "9300:9300"
    networks:
      - ffc
    profiles:
      - docker
      - development
  
#  es-kibana:
#    image: "docker.elastic.co/kibana/kibana:7.14.0"
#    environment:
#      SERVER_NAME: kibana.example.org
#      ELASTICSEARCH_URL: http://elasticsearch:9200
#    ports:
#      - "5601:5601"
#    networks:
#      - ffc
#    profiles:
#      - docker
#      - development
  
  redis:
    image: 'bitnami/redis:latest'
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - ffc
    ports:
      - "6379:6379"
    profiles:
      - docker
      - development
      - backend
    volumes:
      - redis:/data

  api:
    image: sd0720/featureflagco.api
    container_name: api
    ports:
      - "5001:5001"
    networks:
      - ffc
    profiles:
      - docker

  messaging:
    image: sd0720/featureflagco.messaging
    container_name: messaging
    ports:
      - "6501:6501"
    networks:
      - ffc
    profiles:
      - docker

  portal:
    image: sd0720/featureflagco.portal
    container_name: portal
    ports:
      - "4200:80"
    restart: always
    profiles:
      - docker

  ffc-experiments:
    image: sd0720/featureflagco.experiment
    container_name: experiments
    environment:
      - CUSTOMERS_HOST=redis
      - CUSTOMERS_PORT=6379
    depends_on:
      - redis
    ports:
      - "8080:80"
    networks:
      - ffc
    restart: always
    profiles:
      - docker
    volumes:
      - expt-log:/var/log/